<script>
    const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
        if (entry.isIntersecting) {
            let number = entry.target.querySelector('.number');
            let counter = 0;
            const intervalId = setInterval(() => {
                if (counter == 65) {
                    clearInterval(intervalId);
                } else {
                    counter += 1;
                    number.innerHTML = `${counter}%`;
                }
            }, 30);
        }
    });
}, { threshold: 0.1 });

Array.from(document.querySelectorAll('.language')).forEach((language) => {
    observer.observe(language);
});
</script>

<section class="box languages">
    {Array.from({ length: 5 }).map((_, index) => {
        let images = ["assets/svelte.png", "assets/laravel.png", "assets/astro.png", "assets/tailwindcss.png", "assets/postgresql.png"];
        return (
            <div class="stack gap-2 lg:gap-4">
                <div class="outer">
                    <div class="inner">
                        <img id={`image-${index}`} src={images[index]} alt="Description" class="image">
                    </div>
                </div>
                <svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="160px" height="160px">
                    <defs>
                        <linearGradient id="GradientColor">
                            <stop offset="0%" stop-color="#DA22FF" />
                            <stop offset="100%" stop-color="#9733EE" />
                        </linearGradient>
                    </defs>
                    <circle cx="80" cy="80" r="70" stroke-linecap="round" />
                </svg>
            </div>
        );
    })}
</section>

<style>
    .languages {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    gap: 1rem; /* Decrease this value to reduce the gap */
    justify-items: center;
    align-items: center;
    height: 60vh;
    padding: 3rem;
    box-sizing: border-box;
    overflow: auto;
    }

    .image {
    width: 50%;
    height: 50%;
    object-fit: cover;
    }

	@media (min-width: 50em) {
		.box {
			border-radius: 1.5rem;
			padding: 2.5rem;
		}

		.languages {
			display: grid;
			grid-template-columns: repeat(5, 1fr);
			gap: 2rem;
		}

    .stack{
        width: 160px;
        height: 160px;
        margin: 1rem;
        position: relative;
    }

    .outer{
        width: 160px;
        height: 160px;
        padding: 20px;
        box-shadow: 6px 6px 10px -1px rgba(0,0,0,0.15), -6px -6px 10px -1px rgba(255,255,255,0.7);
        border-radius: 50%;
    }

    .inner{
        height: 120px;
        width: 120px;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: inset 4px 4px 6px -1px rgba(0,0,0,0.2), inset -4px -4px 6px -1px rgba(255,255,255,0.7), -0.5px -0.5px 0px rgba(255, 255, 255, 1), 0.5 0.5px 0px rgba(0, 0, 0, 0.15), 0px 12px 10px -10px rgba(0, 0, 0, 0.05);
        border-radius: 50%;
    }

    #number{
        font-weight: 600;
        color: #555;
        font-size: 30px;
    }

    circle{
        fill: none;
        stroke: url(#GradientColor);
        stroke-width: 20px;
        stroke-dasharray: 450;
        stroke-dashoffset: 450;
        animation: anim 2s linear forwards;
    }

    @keyframes anim{
        100%{
            stroke-dashoffset: 157.5;
        }
    }

    svg{
        position: absolute;
        top: 0;
        left: 0;
    }
</style>